global !p
from conversions import *
endglobal

snippet enuma "Anonymous enumeration" !b
enum
{
  ${1:ITEM},
};$0
endsnippet

snippet class "Class declaration" !b
class ${1:`!p snip.rv = to_pascalcase(snip.basename) or "Name"`}
{
public:
  ${1/(\w+).*/$1/}(${2});

  virtual ~${1/(\w+).*/$1/}() { }

private:
  $0
};
endsnippet

snippet ponce "Pragma once" b
#pragma once$0
endsnippet

snippet ns "Namespace" !b
namespace ${1}
{

$0

}
endsnippet

snippet nsn "Namespace nested" b
${1/^([^:]*)(.*)/namespace $1 {/}${1/([^:]*)(:+)?([^:]*)?/(?3: namespace $3 {)/g}

$0

${1/([^:]*)(:+)?/} /g}// namespace ${1:name}
endsnippet

snippet up "Unique pointer"
std::unique_ptr<${1:${VISUAL:Type}}>$0
endsnippet

snippet sp "Shared pointer"
std::shared_ptr<${1:${VISUAL:Type}}>$0
endsnippet

snippet uup "Using unique pointer" !b
using ${2:UPtr} = std::unique_ptr<${1:Type}>;$0
endsnippet

snippet usp "Using shared pointer" !b
using ${2:Ptr} = std::shared_ptr<${1:Type}>;$0
endsnippet

snippet sc "Static cast"
static_cast<${2:int}>(${1:${VISUAL:variable}})$0
endsnippet

snippet rc "Reinterpret cast"
reinterpret_cast<${2:float*}>(${1:${VISUAL:variable}})$0
endsnippet

snippet temp "Template" !b
template<typename ${1:T}>$0
endsnippet

snippet tn "Typename" !b
typename $0
endsnippet

snippet for "For loop" !b
for (${3:size_t} ${2:i} = 0; $2 < ${1:count}; ++$2)
{
  ${VISUAL}$0
}
endsnippet

snippet fori "For loop over iterable" !b
for (const auto& ${1:item} : ${2:items})
{
  ${VISUAL}$0
}
endsnippet

snippet cr "Const reference" w
const ${1:type}&$0
endsnippet

snippet ar "Auto reference" !b
auto& ${1:variable} = $0
endsnippet

snippet car "Const auto reference" !b
const auto& ${1:variable} = $0
endsnippet

snippet try "Try-catch block" !b
try
{
  ${VISUAL}$0
}
catch (${1:std::runtime_error& e})
{
  // TODO: handle error
}
endsnippet

snippet fio "File IO" !b
#include <iostream>
#include <fstream>
std::ofstream file("filename.txt");
if (file.is_open())
{
  file << "Test";
  file.close();
}
endsnippet

snippet cout "std::cout output" !b
std::cout << ${1}${2: << std::endl};$0
endsnippet

#######################################################################
#                           Numeric limits                            #
#######################################################################

snippet nan "NaN" w
std::numeric_limits<${1:float}>::quiet_NaN()$0
endsnippet

snippet inf "Infinity" w
std::numeric_limits<${1:float}>::infinity()$0
endsnippet

snippet eps "Epsilon"
std::numeric_limits<${1:float}>::epsilon()$0
endsnippet

#######################################################################
#                              Includes                               #
#######################################################################

snippet inc "Include header" b
#include <${1:header.h}>$0
endsnippet

snippet incs "Include standard library header" b
#include <${1:iostream}>$0
endsnippet

snippet incl "Include local header" b
#include "${1:`!p snip.rv = snip.basename`}.${2:h}"$0
endsnippet

snippet incb "Include Boost library header" b
#include <boost/${1:format}.hpp>$0
endsnippet

snippet incv "Include VTK library header" b
#include <vtk${1:SmartPointer}.h>$0
endsnippet

snippet math "Include math header" !b
${1:#define _USE_MATH_DEFINES
}#include <cmath>$0
endsnippet

#######################################################################
#                           Random numbers                            #
#######################################################################

snippet random "Random (uniform int) number generator" !b
#include <random>
std::random_device rnd;
std::mt19937 gen(rnd());
std::uniform_int_distribution<> ${3:dist}(${1:0}, ${2});
$3(gen);
endsnippet

snippet shuffle "Shuffle elements of a container" b
#include <random>
#include <algorithm>
std::random_device rnd;
std::mt19937 gen(rnd());
std::shuffle(${1:v}.begin(), $1.end(), gen)$0
endsnippet

#######################################################################
#                           Variable types                            #
#######################################################################

snippet vec "Vector"
std::vector<${1:float}>$0
endsnippet

snippet str "String"
std::string$0
endsnippet

snippet csr "const string&" w
const std::string&$0
endsnippet

snippet map "Map" !
std::map<${1:size_t}, ${2:float}>$0
endsnippet

snippet inmap "Check if element is in map" !b
if (${1:map}.count (${2:element}) == 0)
{
  $0
}
endsnippet

#######################################################################
#                               Idioms                                #
#######################################################################

snippet pimpl "PIMPL idiom" b
struct Impl;
std::unique_ptr<Impl> p;
endsnippet

#######################################################################
#                             Algorithms                              #
#######################################################################

snippet "max" "Max element" br
${3:result_iter} = std::max_element(${1:v}.begin(), $1.end()${2/.+/, /}${2:[](const auto& a, const auto& b){ return a < b; }})$0
endsnippet

snippet "min" "Min element" br
${3:result_iter} = std::min_element(${1:v}.begin(), $1.end()${2/.+/, /}${2:[](const auto& a, const auto& b){ return a < b; }})$0
endsnippet

snippet "minmax" "Min/max element" br
${3:minmax_iters} = std::minmax_element(${1:v}.begin(), $1.end()${2/.+/, /}${2:[](const auto& a, const auto& b){ return a < b; }})$0
endsnippet

snippet sort "Sort vector" b
std::sort(${1:v}.begin(), $1.end()${2/.+/, /}${2:[](const auto& a, const auto& b){ return a < b; }})$0
endsnippet

snippet remove_if "Remove vector elements" b
${1:v}.erase(std::remove_if($1.begin(), $1.end(), [](const auto& ${2:item}){ return ${3:$2 == true;} }), $1.end())$0
endsnippet

snippet transform "Transform vector" b
std::transform(${1:v}.begin(), $1.end(), std::back_inserter(${2:destination}), [](const auto& ${3:v}) { return $3; })$0
endsnippet

snippet any "Any of" b
std::any_of(${1:v}.begin(), $1.end(), [](const auto& ${2:item}) { return ${3}; })$0
endsnippet

snippet insert "Insert range into vector" b
${1:v}.insert($1.end(), ${2:source}.begin(), $2.end())$0
endsnippet

snippet sum "Sum values" b
auto ${3:sum} = std::accumulate(${1:v}.begin(), $1.end(), ${2:0})$0
endsnippet

snippet accumulate "Accumulate values" b
auto ${4:sum} = std::accumulate(${1:v}.begin(), $1.end(), ${2:init}, ${3:[](const auto& acc, const auto& val){ return acc + val; }})$0
endsnippet

snippet count "Count elements equal to value" b
auto ${3:count} = std::count(${1:v}.begin(), $1.end(), ${2:target_value})$0
endsnippet

snippet count_if "Count elements for which predicate holds" b
auto ${3:count} = std::count_if(${1:v}.begin(), $1.end(), ${2:[](const auto& v) { return v > 0; }})$0
endsnippet

#######################################################################
#                        Operator overloading                         #
#######################################################################

snippet op<< "operator<< overload" b
// Note: it is recommended that the operator is inside namespace where the type belongs
std::ostream& operator<<(std::ostream& os, const ${1:Type}& obj)
{
	${0:// Implementation}
	return os;
}
endsnippet

snippet op>> "operator>> overload" b
// Note: it is recommended that the operator is inside namespace where the type belongs
std::istream& operator>>(std::istream& is, ${1:Type}& obj)
{
	${0:// Implementation}
	if (false /* $1 could not be constructed */)
		is.setstate(std::ios::failbit);
	return is;
}
endsnippet

snippet opcomp "operotor comparison overload" b
inline bool operator==(const ${1:Type}& lhs, const $1& rhs)
{
	${2:/* do actual comparison */}
}

inline bool operator!=(const $1& lhs, const $1& rhs)
{
	return !operator==(lhs, rhs);
}

inline bool operator< (const $1& lhs, const $1& rhs)
{
	${0:/* do actual comparison */}
}

inline bool operator> (const $1& lhs, const $1& rhs)
{
	return  operator< (rhs, lhs);
}

inline bool operator<=(const $1& lhs, const $1& rhs)
{
	return !operator> (lhs, rhs);
}

inline bool operator>=(const $1& lhs, const $1& rhs)
{
	return !operator< (lhs, rhs);
}
endsnippet
