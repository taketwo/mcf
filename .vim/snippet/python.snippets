global !p
def insert_import(pkg, identifier=None):
    import re
    r1 = re.compile('^(from \w+ )?import \w+( as \w+)?$')
    r2 = re.compile('^# -\*- coding: utf-8 -\*-$')
    # Scan the buffer to find (a) any existing imports (b) "coding" line
    # If imports exists, insert before them. If imports do not exist, insert
    # after the "coding" line. If that does not exist either, insert in the
    # beginning of the file.
    location = 0
    for i, line in enumerate(snip.buffer):
        if r1.match(line):
            location = i
            break
        elif r2.match(line):
            location = i + 1
    if identifier is None:
        snip.buffer.append('import {}'.format(pkg), location)
    else:
        snip.buffer.append('from {} import {}'.format(pkg, identifier), location)
endglobal

snippet main "Main" !b
if __name__ == '__main__':
	$0
endsnippet

snippet paired "Paired list"
zip(${1:list}[:-1], $1[1:])$0
endsnippet

snippet np "Import numpy" b
import numpy as np$0
endsnippet

snippet plt "Import pyplot" b
import matplotlib.pyplot as plt$0
endsnippet

snippet comp "(List) comprehension" !i
${4:item} for ${2:item} in ${1:items}${3/.+/ if /}${3:condition}${3/.+//}$0
endsnippet

snippet p "Print" b
print($0)
endsnippet

###########################################################################
#                       Function and class snippets                       #
###########################################################################

snippet def "Function" !b
def ${1:function}(`!p
if snip.indent:
   snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1}):
	${3:pass}
endsnippet

snippet ds "Docstring" !b
"""
$0
"""
endsnippet

snippet init "Init function" !b
def __init__(self${1/.+/, /}${1:arguments}):
	${2:pass}
endsnippet

snippet super "Call base class method" w
super().${1:__init__}($2)$0
endsnippet

snippet "prop(erty)?" "Property" br
@property
def ${1:x}(self):
	return ${2:self._$1}

${3:@$1.setter
def $1(self, $1):
	${4:self._$1 = $1}}
endsnippet

###########################################################################
#                            Argparse snippets                            #
###########################################################################

snippet argparse "Argparse" !b
parser = argparse.ArgumentParser(description='''
${1}
''', formatter_class=argparse.RawDescriptionHelpFormatter)
$0
args = parser.parse_args()
endsnippet

snippet arg "Add argument" !b
parser.add_argument("${1:--name}", ${2/.+/"-/}${2:n}${2/.+/", /}${3/.+/type=/}${3:int}${3/.+/, /}${4/.+/default=/}${4:0}${4/.+/, /}help="${5:help}")$0
endsnippet

snippet argb "Add argument (boolean flag)" !b
parser.add_argument("${1:--name}", ${2/.+/"-/}${2:n}${2/.+/", /}action="store_true", help="${3:help}")$0
endsnippet

snippet argf "Add argument (file)" !b
parser.add_argument("${1:name}", type=argparse.FileType("${2:r}"), help="${3:help}")$0
endsnippet
