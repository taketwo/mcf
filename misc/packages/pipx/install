#!/usr/bin/env bash

PYTHON_VERSION=3.11.3

echo "Pipx installation"
echo " * Required Python version: $PYTHON_VERSION"

# Unconditionally add pyenv to the PATH to be on the safe side
PATH="${HOME}/.pyenv/bin:${PATH}"
eval "$(pyenv init --path)"
eval "$(pyenv init -)"
# Check if required version of Python is installed with pyenv
if ! pyenv versions | grep -q "$PYTHON_VERSION"; then
  echo " > Installing required Python version with Pyenv"
  PYTHON_CONFIGURE_OPTS="--enable-shared" pyenv install --skip-existing "$PYTHON_VERSION"
fi
echo " > Activating required Python version in current shell with Pyenv"
pyenv shell "$PYTHON_VERSION"
active=$(python --version | cut -d ' ' -f2)
echo " * Active Python version: $active"
# if active is not same as required, exit with error
if [[ "$active" != "$PYTHON_VERSION" ]]; then
  echo " ! Failed to activate required Python version"
  exit 1
fi

echo " > Installing Pipx via system Pip"
pip3 install --user --no-warn-script-location pipx
echo " > Installing Pipx via Pipx"
python3 -m pipx install -f pipx # -f to force overwrite the binary installed with previous command
# Store pipx symlink
pipx_where="$HOME/.local/bin/pipx"
pipx_where_actual=$(readlink "$pipx_where")
echo " > Uninstalling Pipx via system Pip"
pip3 uninstall -y pipx # This removes pipx symlink installed by pipx
# Recover symlink, ensuring that its parent directory exists
mkdir -p "$(dirname "$pipx_where")"
ln -s "$pipx_where_actual" "$pipx_where"
