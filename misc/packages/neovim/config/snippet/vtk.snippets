priority 100

global !p
from conversions import *
def get_level(c):
  levels = ["Debug", "Warning", "Error"]
  for l in levels:
    if l.lower().startswith(c.lower()):
      return l
  return "Debug"
endglobal

snippet vsg "VTK set/get macros" b
vtkSetMacro(${1:Variable}, ${2:double});
vtkGetMacro($1, $2);$0
endsnippet

snippet vsgv "VTK set/get vector macros" b
vtkSetVector${3:3}Macro(${1:Variable}, ${2:double});
vtkGetVectorMacro($1, $2, $3);$0
endsnippet

snippet vsgs "VTK set/get string macros" b
vtkSetStringMacro(${1:Variable});
vtkGetStringMacro($1);$0
endsnippet

snippet vsgb "VTK set/get boolean macros" b
vtkSetMacro(${1:Variable}, bool);
vtkGetMacro($1, bool);
vtkBooleanMacro($1, bool);$0
endsnippet

snippet vsp "VTK smart pointer" i
vtkSmartPointer<${1:vtkDoubleArray}>::New()$0
endsnippet

snippet vsdc "VTK safe down cast" i
${1:vtkDoubleArray}::SafeDownCast($2)$0
endsnippet

snippet vsnm "VTK standard new macro" b
#include <vtkObjectFactory.h>
vtkStandardNewMacro(${1:`!p snip.rv = to_camelcase(snip.basename) or "ClassName"`})
endsnippet

snippet vcd "VTK constructor/destructor" b
${1:`!p snip.rv = to_camelcase(snip.basename) or "ClassName"`}::$1()
{
	$0
}

$1::~$1()
{
}
endsnippet

snippet vps "VTK print self" b
void ${1:`!p snip.rv = to_camelcase(snip.basename) or "ClassName"`}::PrintSelf(ostream& os, vtkIndent indent)
{
	this->Superclass::PrintSelf(os, indent);
}
endsnippet

snippet class "VTK class declaration" !b
#include <$2.h>

class ${1:`!p snip.rv = to_camelcase(snip.basename) or "ClassName"`} : public ${2:vtkAlgorithm}
{
public:
	static $1 *New();

	vtkTypeMacro($1, $2);

	virtual void PrintSelf(ostream& os, vtkIndent indent) override;

protected:
	$1();

	~$1();

	$0

private:
	$1(const $1&) = delete;

	void operator=(const $1&) = delete;
};
endsnippet

snippet "vlog(\w?)" "Log message" br
vtk`!p
snip.rv = get_level(match.group(1) or 'd')
`Macro(${1:"Message with << operators"})$0
endsnippet
