#!/usr/bin/env python3
# encoding: utf-8


import os
import socket
import subprocess
import tempfile
import os.path
from pathlib import Path

import click

from filesystem import which


class Location(object):

    def __init__(self, path):
        self.path = path

    def __enter__(self):
        return self.path

    def __exit__(self, type, value, traceback):
        pass


class MTPLocation(object):
    """
    Pre-mounted MTP location.
    """

    def __init__(self, relative_path):
        gvfs = Path("/run/user/1000/gvfs")
        if not gvfs.is_dir():
            raise Exception("{} is not a directory".format(gvfs))
        mtps = list(gvfs.iterdir())
        if not len(mtps) == 1:
            raise Exception("There should be a single MTP directory in {}".format(gvfs))
        self.path = mtps[0] / relative_path

    def __enter__(self):
        return str(self.path)

    def __exit__(self, type, value, traceback):
        pass


class JMTPFSLocation(object):

    def __init__(self, relative_path):
        self.relative_path = relative_path
        if which("jmtpfs") is None:
            raise Exception("jmtpfs is not available")

    def __enter__(self):
        self.path = tempfile.TemporaryDirectory()
        print('Mounting jmtpfs at {}'.format(self.path.name))
        cmd = 'jmtpfs {}'.format(self.path.name)
        subprocess.check_call(cmd.split())
        return os.path.join(self.path.name, self.relative_path)

    def __exit__(self, type, value, traceback):
        print('Unmounting jmtpfs from {}'.format(self.path.name))
        cmd = 'fusermount -u {}'.format(self.path.name)
        subprocess.check_call(cmd.split())
        self.path.cleanup()


def get_music_location(host=None):
    if host is None:
        return Location(os.path.expanduser('~/Music'))
    if host in ['raccoon', 'ramen', 'alpaca']:
        return Location(host + ':/home/sergey/Music')
    elif host == 'sloth':
        return Location(host + ':/data/Music')
    elif host == 'xz1c':
        return MTPLocation('disk/Music')
    else:
        p = Path(host).resolve()
        if p.is_dir() and p.name == "Music":
            return Location(str(p))
        raise Exception('unknown host')


def rsync(src, dst, delete=True):
    cmd = ['rsync',
           '-avz',
           '--size-only',
           '--omit-dir-times',
           '--no-perms',
           '--no-t',
           '--progress']
    if delete:
        cmd.append('--delete')
    cmd.append(src + ('' if src.endswith('/') else '/'))
    cmd.append(dst)
    subprocess.call(cmd)


@click.group()
def cli():
    pass


@cli.command()
@click.option('--delete', '-d', is_flag=True,
              help='Delete extraneous files from destination')
@click.argument('host')
def push(host, delete):
    """
    Push music to another host.
    """
    with get_music_location() as src:
        with get_music_location(host) as dst:
            rsync(src, dst, delete=delete)


if __name__ == '__main__':
    cli()
