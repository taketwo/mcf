#!/usr/bin/env python3

import os
import os.path
import subprocess
import tempfile
from pathlib import Path

import click

from filesystem import which


class Location:
    def __init__(self, path, group=None):
        self.path = path
        self.group = group

    def __enter__(self):
        return self

    def __exit__(self, type, value, traceback):
        pass


class MTPLocation:
    """Pre-mounted MTP location."""

    def __init__(self, relative_path):
        gvfs = Path("/run/user/1000/gvfs")
        if not gvfs.is_dir():
            raise Exception(f"{gvfs} is not a directory")
        mtps = list(gvfs.iterdir())
        if not len(mtps) == 1:
            raise Exception(f"There should be a single MTP directory in {gvfs}")
        self.path = mtps[0] / relative_path
        self.group = None

    def __enter__(self):
        return str(self.path)

    def __exit__(self, type, value, traceback):
        pass


class JMTPFSLocation:

    def __init__(self, relative_path):
        self.relative_path = relative_path
        if which("jmtpfs") is None:
            raise Exception("jmtpfs is not available")
        self.group = None

    def __enter__(self):
        self.path = tempfile.TemporaryDirectory()
        print(f"Mounting jmtpfs at {self.path.name}")
        cmd = f"jmtpfs {self.path.name}"
        subprocess.check_call(cmd.split())
        return os.path.join(self.path.name, self.relative_path)

    def __exit__(self, type, value, traceback):
        print(f"Unmounting jmtpfs from {self.path.name}")
        cmd = f"fusermount -u {self.path.name}"
        subprocess.check_call(cmd.split())
        self.path.cleanup()


def get_music_location(host: str = None) -> Location:
    if host is None:
        return Location(os.path.expanduser("~/Music"))
    if host in ["raccoon", "ramen", "alpaca", "lemur"]:
        return Location(host + ":/home/sergey/Music")
    if host == "sloth":
        return Location(host + ":/data/Music", group="data")
    if host == "xz1c":
        return MTPLocation("disk/Music")
    p = Path(host).resolve()
    if p.is_dir() and p.name == "Music":
        return Location(str(p))
    raise Exception("unknown host")


def rsync(src: Location, dst: Location, delete: bool = True) -> None:
    cmd = [
        "rsync",
        "-avz",
        "--size-only",
        "--omit-dir-times",
        "--no-perms",
        "--no-t",
        "--progress",
    ]
    if delete:
        cmd.append("--delete")
    if dst.group:
        cmd.append("--chown=:" + dst.group)
    cmd.append(src.path + ("" if src.path.endswith("/") else "/"))
    cmd.append(dst.path)
    subprocess.call(cmd)


@click.group()
def cli():
    pass


@cli.command()
@click.option(
    "--delete",
    "-d",
    is_flag=True,
    help="Delete extraneous files from destination",
)
@click.argument("host")
def push(host: str, *, delete: bool) -> None:
    """Push music to another host."""
    with get_music_location() as src, get_music_location(host) as dst:
        rsync(src, dst, delete=delete)


@cli.command()
@click.option(
    "--delete",
    "-d",
    is_flag=True,
    help="Delete extraneous files from destination",
)
@click.argument("host")
def pull(host: str, *, delete: bool) -> None:
    """Pull music from another host."""
    with get_music_location() as dst, get_music_location(host) as src:
        rsync(src, dst, delete=delete)


if __name__ == "__main__":
    cli()
