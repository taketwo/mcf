#!/usr/bin/env bash

function display_help {
  echo "Usage: $0 [options] input-path [output-path]"
  echo
  echo "Options:"
  echo "-c codec       Specify the codec (h264 or h265). If not provided, the input video's codec is used."
  echo "-r resolution  Specify the resolution (1080p, 720p, 480p, 360p, or 240p). If not provided, the input video's resolution is used."
  echo "-d             Perform a dry run printing command(s) that would be executed without actually executing them."
  echo "-h             Display this help message."
  echo
  echo "If output path is not provided, the input path name with .recoded suffix is used. Both files and directories are supported. In"
  echo "the latter case, all files in the directory are recoded."
  echo
  echo "If neither of -c/-r options are provided, the script will print information about video file(s)."
}

codec=""
resolution=""
dry_run=false

while getopts c:r:dh option; do
  case "${option}" in
    c) codec=${OPTARG} ;;
    r) resolution=${OPTARG} ;;
    d) dry_run=true ;;
    h)
      display_help
      exit 0
      ;;
    *)
      display_help
      exit 1
      ;;
  esac
done

shift $((OPTIND - 1))

# Validate and convert codec to libx format if specified
if [[ -n $codec ]]; then
  if [[ $codec == "h264" ]]; then
    codec="libx264"
  elif [[ $codec == "h265" ]]; then
    codec="libx265"
  else
    echo "Invalid codec. Please choose either h264 or h265."
    exit 1
  fi
fi

# Validate and convert resolution to height if specified
if [[ -n $resolution ]]; then
  case $resolution in
    "1080p")
      height=1080
      ;;
    "720p")
      height=720
      ;;
    "480p")
      height=480
      ;;
    "360p")
      height=360
      ;;
    "240p")
      height=240
      ;;
    *)
      echo "Invalid resolution. Please choose from 1080p, 720p, 480p, 360p, or 240p."
      exit 1
      ;;
  esac
fi

# Check if ffmpeg and ffprobe are installed
if ! command -v ffmpeg &>/dev/null || ! command -v ffprobe &>/dev/null; then
  echo "ffmpeg and/or ffprobe are not available"
  echo "Please install them using the following command on Ubuntu:"
  echo "  sudo apt install ffmpeg"
  exit 1
fi

function display_info() {
  local input_file=$1
  echo "File: $input_file"
  local video_info=$(ffprobe -v error -select_streams v:0 -show_entries stream=codec_name,width,height -of csv=p=0 "$input_file")
  IFS=',' read -r codec width height <<<"$video_info"
  echo "  Video:"
  echo "    Resolution: ${width}x${height}"
  echo "    Codec: $codec"
  echo "  Streams:"
  ffprobe -v error \
    -show_entries "stream=index,codec_type,codec_name:stream_tags=language,title" \
    -of json \
    "$input_file" | jq -r '.streams[] | "\(.index) \(.codec_type) \(.codec_name) \(.tags.language // "") \(.tags.title // "")"' |
    while read -r index codec_type codec_name lang title; do
      printf "    [%s] %-10s: %-10s" "$index" "$codec_type" "$codec_name"
      if [[ -n "$lang" ]]; then
        printf " (%s)" "$lang"
      fi
      if [[ -n "$title" ]]; then
        printf " - %s" "$title"
      fi
      echo
    done
  echo
}

function recode_video() {
  input_file=$1
  output_file=$2
  echo "Input file: $input_file"
  echo "Output file: $output_file"
  ffmpeg_cmd=("ffmpeg" "-i" "$input_file")
  input_height=$(ffprobe -v error -select_streams v:0 -show_entries stream=height -of csv=s=x:p=0 "$input_file")
  echo "Input resolution: ${input_height}p"
  if [[ -n $height ]]; then
    if ((input_height < height)); then
      echo "Output resolution: same (input resolution is lower than requested output resolution)"
    else
      ffmpeg_cmd+=("-vf" "scale=-1:$height")
      echo "Output resolution: ${height}p"
    fi
  else
    echo "Output resolution: same"
  fi
  input_codec=$(ffprobe -v error -select_streams v:0 -show_entries stream=codec_name -of default=noprint_wrappers=1:nokey=1 "$input_file")
  echo "Input codec: $input_codec"
  if [[ -n $codec ]]; then
    ffmpeg_cmd+=("-c:v" "$codec")
    echo "Output codec: $codec"
  else
    echo "Output codec: same"
  fi
  ffmpeg_cmd+=("$output_file")
  echo "Recoding command: ${ffmpeg_cmd[*]}"
  if ! $dry_run; then
    "${ffmpeg_cmd[@]}"
  fi
}

input_path=$1
output_path=$2

if [[ $# == 1 && $OPTIND == 1 ]]; then
  if [[ -f $input_path ]]; then
    display_info "$input_path"
  elif [[ -d $input_path ]]; then
    echo "Directory: $input_path"
    echo
    for file in "$input_path"/*; do
      if [[ -f $file ]]; then
        display_info "$file"
      fi
    done
  else
    echo "Invalid input path. Please provide a valid file or directory."
    exit 1
  fi
  exit 0
fi

if [[ -f $input_path ]]; then
  if [[ -z $output_path ]]; then
    output_path="${input_path%.*}.recoded.${input_path##*.}"
  fi
  recode_video "$input_path" "$output_path"
elif [[ -d $input_path ]]; then
  if [[ -z $output_path ]]; then
    output_path=$(basename "$input_path").recoded
  fi
  mkdir -p "$output_path"
  echo "Recoding all files in directory $input_path"
  echo "Recoded files will be saved in $output_path"
  for file in "$input_path"/*; do
    if [[ -f $file ]]; then
      recode_video "$file" "$output_path/$(basename "$file")"
    fi
  done
else
  echo "Invalid input path. Please provide a valid file or directory."
  exit 1
fi
