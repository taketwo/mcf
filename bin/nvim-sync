#!/usr/bin/env bash

# Define available operations and targets
declare -a operations=("restore" "update" "commit")
declare -a targets=("editor" "plugins")
declare -A valid_operations
declare -A valid_targets
for operation in "${operations[@]}"; do
  valid_operations[$operation]=1
done
for target in "${targets[@]}"; do
  valid_targets[$target]=1
done

LOCK_REPO_NAME="mcf-nvim-lock"
LOCK_REPO_HTTPS_URI="https://gitlab.com/taketwo/$LOCK_REPO_NAME.git"
LOCK_REPO_GIT_URI="git@gitlab.com:taketwo/$LOCK_REPO_NAME.git"
LOCK_REPO_PATH="$MCF/external/$LOCK_REPO_NAME"
LAZY_LOCK_FILE_NAME="lazy-lock.json"
LAZY_LOCK_FILE_PATH_LOCAL="$MCF/misc/packages/neovim/config/$LAZY_LOCK_FILE_NAME"
LAZY_LOCK_FILE_PATH_REMOTE="$LOCK_REPO_PATH/$LAZY_LOCK_FILE_NAME"
BOB_LOCK_FILE_NAME="bob-lock.json"
BOB_LOCK_FILE_PATH_REMOTE="$LOCK_REPO_PATH/$BOB_LOCK_FILE_NAME"

# Parse revision of the installed Neovim
function neovim_parse_revision() {
  # Return "none" if Neovim is not installed
  if ! hash nvim 2>/dev/null; then
    echo "none"
    return
  fi
  # Return "none" if Neovim fails to run and report its version
  output=$(nvim --version)
  if [[ $? -ne 0 ]]; then
    echo "none"
    return
  fi
  # Parse the output of `nvim --version` to extract the revision.
  # Examples:
  #  - NVIM v0.10.0-dev-3145+g9ca81b025
  #  - NVIM v0.10.0-dev-a0a189a
  # The first one is a nightly build, the second one is arbitrary commit built from source locally.
  version_string=$(echo "$output" | head -n 1 | cut -d ' ' -f 2)
  revision=$(echo "$version_string" | grep -oP '(?<=\+g)[0-9a-f]+')
  if [ -z "$revision" ]; then
    revision=$(echo "$version_string" | grep -oP '(?<=-dev-)[0-9a-f]+')
  fi
  echo "$revision"
}

# Retrieve full hash and commit date given a revision
function neovim_retrieve_commit_info() {
  commit_details=$(curl -s "https://api.github.com/repos/neovim/neovim/commits/$1")
  commit_hash=$(echo "$commit_details" | jq -r '.sha')
  commit_date=$(echo "$commit_details" | jq -r '.commit.committer.date')
  pretty_date=$(date -d "$commit_date" +"%Y-%m-%d %H:%M:%S")
  echo "$commit_hash" "$pretty_date"
}

# Retrieve full hash of the latest nightly build
function neovim_retrieve_nightly_hash() {
  last_prerelease_json=$(curl -s "https://api.github.com/repos/neovim/neovim/releases" | jq '[.[] | select(.prerelease == true)] | max_by(.published_at)')
  tag_name=$(echo "$last_prerelease_json" | jq -r '.tag_name')
  if [[ $tag_name == "nightly" ]]; then
    echo "$last_prerelease_json" | jq -r '.target_commitish'
  else
    echo "Failed to retrieve commit hash of the latest nightly pre-release"
    exit 1
  fi
}

# Obtain the latest revision of the remote lock repository
function repo_obtain_latest() {
  if [ ! -d "$LOCK_REPO_PATH" ]; then
    echo "Lock repository not found, cloning"
    git clone "$LOCK_REPO_HTTPS_URI" "$LOCK_REPO_PATH"
  else
    if ! git -C "$LOCK_REPO_PATH" diff --quiet; then
      echo "Lock repository has uncommitted changes, resetting to the latest commit from the remote repository"
      git -C "$LOCK_REPO_PATH" reset --hard origin/main
    fi
    echo "Pulling the latest commits from the remote lock repository"
    if ! git -C "$LOCK_REPO_PATH" pull; then
      echo "Git pull failed, aborting"
      exit 1
    fi
  fi
}

# Check if a given lock file has changed and commit the changes if it has
function repo_commit_if_changed() {
  if ! git -C "$LOCK_REPO_PATH" diff --quiet "$1"; then
    echo "Lock file has changed, committing changes"
    git -C "$LOCK_REPO_PATH" add "$1"
    git -C "$LOCK_REPO_PATH" commit -m "Update $1" -m "Host: $(hostname -s)"
    there_are_commits_to_push=1
  else
    echo "Lock file has not changed, nothing to commit"
  fi
}

# Eunsure that the remote repository is configured with SSH address
function repo_ensure_ssh() {
  if [[ "$(git -C "$LOCK_REPO_PATH" remote get-url origin)" != "$LOCK_REPO_GIT_URI" ]]; then
    echo "Updating remote repository URI to use SSH authorization"
    git -C "$LOCK_REPO_PATH" remote set-url origin $LOCK_REPO_GIT_URI
  fi
}

# Push commits to the remote repository
function repo_push() {
  if [ -z ${there_are_commits_to_push+x} ]; then
    echo "No new commits to push to remote lock repository"
  else
    repo_ensure_ssh
    echo "Pushing commits to remote lock repository"
    git -C "$LOCK_REPO_PATH" push --force
  fi
}

# Restore the state of Neovim plugins according to the latest remote lock file
function restore_plugins() {
  num_retries=0
  max_retries=3
  until [ $num_retries -ge $max_retries ]; do
    echo "Restoring the state of Neovim plugins"
    cp "$LAZY_LOCK_FILE_PATH_REMOTE" "$LAZY_LOCK_FILE_PATH_LOCAL"
    nvim --headless "+Lazy! restore" "+TSUpdateSync" +qa
    echo "" # TSUpdateSync always prints a message without newline, so we add one
    if diff --brief "$LAZY_LOCK_FILE_PATH_REMOTE" "$LAZY_LOCK_FILE_PATH_LOCAL" >/dev/null; then
      echo "Restoration succeeded"
      break
    else
      num_retries=$((num_retries + 1))
      if [ $num_retries -lt $max_retries ]; then
        echo "Lock file has changed while executing restore command, retrying"
      else
        echo "Restoration failed $num_retries times"
        readarray -t failed_plugins < <(diff \
          --unchanged-line-format="" \
          --old-line-format="%L" \
          --new-line-format="%L" \
          "$LAZY_LOCK_FILE_PATH_REMOTE" "$LAZY_LOCK_FILE_PATH_LOCAL" |
          sed 's/:.*//' |
          sed 's/"//g' |
          sort -u)
        echo "List of plugins that failed to be restored:"
        echo "${failed_plugins[@]}"
        read -p "Do you want to remove these plugins and retry restoration? [y/N] " -n 1 -r
        echo ""
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          echo "Removing plugins:"
          for plugin in "${failed_plugins[@]}"; do
            echo "$plugin"
            nvim --headless "+Lazy! clean $plugin" +qa
          done
          max_retries=$((max_retries + 1))
        else
          break
        fi
      fi
    fi
  done
}

# Install Neovim version stored in the remote lock file
function restore_editor() {
  echo "Restoring editor version"
  lock_hash=$(jq -r '.hash' "$BOB_LOCK_FILE_PATH_REMOTE")
  lock_date=$(jq -r '.date' "$BOB_LOCK_FILE_PATH_REMOTE")
  echo "Lock file hash/date: $lock_hash/$lock_date"
  revision=$(neovim_parse_revision)
  echo "Installed revision: $revision"
  # Check if lock hash starts with installed revision
  if [[ $lock_hash == "$revision"* ]]; then
    echo "Installed version matches the lock file"
    return
  fi
  echo "Installed version/revision does not match the lock file"
  latest_nightly_hash=$(neovim_retrieve_nightly_hash)
  if [[ $lock_hash == "$latest_nightly_hash" ]]; then
    echo "Installing Neovim nightly"
    bob use nightly
  else
    echo "Installing Neovim from commit $lock_hash"
    bob use "$lock_hash"
  fi
}

# Update Neovim plugins
function update_plugins() {
  echo "Launching Neovim to update plugins"
  nvim -c 'autocmd User VeryLazy Lazy check'
}

# Update Neovim editor
function update_editor() {
  echo "Updating editor to the latest nightly build"
  bob use nightly
}

# Commit changes in the local lock file
function commit_plugins() {
  cp "$LAZY_LOCK_FILE_PATH_LOCAL" "$LAZY_LOCK_FILE_PATH_REMOTE"
  repo_commit_if_changed "$LAZY_LOCK_FILE_NAME"
}

# Commit installed Neovim version to the lock file
function commit_editor() {
  revision=$(neovim_parse_revision)
  if [[ $revision == "none" ]]; then
    echo "Neovim is not installed, cannot commit the lock file"
    exit 1
  fi
  read hash date <<<$(neovim_retrieve_commit_info "$revision")
  echo "{
  \"hash\": \"$hash\",
  \"date\": \"$date\"
}" >"$BOB_LOCK_FILE_PATH_REMOTE"
  repo_commit_if_changed "$BOB_LOCK_FILE_NAME"
}

# Parse and validate the input arguments
declare -a execution_plan
current_operation=""
current_target=""

for arg in "$@"; do
  if [[ $arg == "--dry-run" ]]; then
    dry_run_mode=1
    continue
  fi
  if [[ ${valid_operations[$arg]} ]]; then
    if [[ -n $current_operation && -z $current_target ]]; then
      # Previous operation applies to all targets
      for target in "${targets[@]}"; do
        execution_plan+=("$current_operation $target")
      done
    fi
    current_operation=$arg
    current_target=""
  elif [[ ${valid_targets[$arg]} ]]; then
    if [[ -n $current_operation ]]; then
      execution_plan+=("$current_operation $arg")
      current_target=$arg
    else
      echo "Error: target '$arg' specified without an operation"
      exit 1
    fi
  else
    echo "Error: invalid operation or target '$arg'"
    exit 1
  fi
done

# If the last operation had no targets, apply it to all targets
if [[ -n $current_operation && -z $current_target ]]; then
  for target in "${targets[@]}"; do
    execution_plan+=("$current_operation $target")
  done
fi

# If no arguments are provided, run a predefined sync sequence
if [ ${#execution_plan[@]} -eq 0 ]; then
  execution_plan=("update editor" "commit editor" "restore plugins" "update plugins" "commit plugins")
fi

# Add repo management commands to the execution plan
execution_plan=("repo obtain latest" "${execution_plan[@]}")
execution_plan+=("repo push")

# Dry-run output: show the final execution plan and exit
if [[ $dry_run_mode -eq 1 ]]; then
  echo "Execution plan:"
  for command in "${execution_plan[@]}"; do
    echo " - $command"
  done
  exit 0
fi

# Execute the plan
for command in "${execution_plan[@]}"; do
  # build func name by replacing spaces with underscores
  func_name="${command// /_}"
  if declare -f "$func_name" >/dev/null; then
    "$func_name"
  else
    echo "Error: unsupported command: $command"
    exit 1
  fi
done
