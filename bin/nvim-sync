#!/usr/bin/env bash

# Synchronize the state of Neovim plugins

LOCK_REPO_NAME="mcf-nvim-lock"
LOCK_REPO_URI="git@gitlab.com:taketwo/$LOCK_REPO_NAME.git"
LOCK_REPO_PATH="$MCF/external/$LOCK_REPO_NAME"

# Clone or pull the external repository
if [ ! -d "$LOCK_REPO_PATH" ]; then
  echo "Lock repository not found, cloning"
  git clone "$LOCK_REPO_URI" "$LOCK_REPO_PATH"
else
  echo "Lock repository found, pulling latest changes"
  if ! git -C "$LOCK_REPO_PATH" pull; then
    echo "Git pull failed, aborting"
    exit 1
  fi
fi

# Copy the lock file to the local repository
LAZY_LOCK_FILE_NAME="lazy-lock.json"
LAZY_LOCK_FILE_PATH_LOCAL="$MCF/misc/packages/neovim/config/$LAZY_LOCK_FILE_NAME"
LAZY_LOCK_FILE_PATH_REMOTE="$LOCK_REPO_PATH/$LAZY_LOCK_FILE_NAME"

# Restore the state of Neovim plugins. Retry up to 3 times before giving up.
retries_left=3
until [ $retries_left -le 0 ]; do
  echo "Restoring the state of Neovim plugins"
  cp "$LAZY_LOCK_FILE_PATH_REMOTE" "$LAZY_LOCK_FILE_PATH_LOCAL"
  nvim --headless "+Lazy! restore" "+TSUpdateSync" +qa
  echo "" # TSUpdateSync always prints a message without newline, so we add one
  if diff --brief "$LAZY_LOCK_FILE_PATH_REMOTE" "$LAZY_LOCK_FILE_PATH_LOCAL" >/dev/null; then
    echo "Restoration succeeded"
    break
  else
    retries_left=$((retries_left - 1))
    if [ $retries_left -gt 0 ]; then
      echo "Lock file has changed while executing restore command, retrying"
    else
      echo "Restoration failed after 3 retries"
      echo "List of plugins that failed to be updated:"
      diff --unchanged-line-format="" --old-line-format="" --new-line-format="%L" "$LAZY_LOCK_FILE_PATH_REMOTE" "$LAZY_LOCK_FILE_PATH_LOCAL" | sed 's/:.*//' | sed 's/"//g'
      exit 2
    fi
  fi
done

if [ "$1" = "--update" ]; then
  echo "Launching Neovim to update plugins"
  nvim -c 'autocmd User VeryLazy Lazy check'
  cp "$LAZY_LOCK_FILE_PATH_LOCAL" "$LAZY_LOCK_FILE_PATH_REMOTE"
  # Check if the lock file has changed
  if ! git -C "$LOCK_REPO_PATH" diff --quiet "$LAZY_LOCK_FILE_NAME"; then
    echo "Lock file has changed, committing and pushing changes"
    git -C "$LOCK_REPO_PATH" add "$LAZY_LOCK_FILE_NAME"
    git -C "$LOCK_REPO_PATH" commit -m "Update $LAZY_LOCK_FILE_NAME" -m "Host: $(hostname -s)"
    git -C "$LOCK_REPO_PATH" push
  else
    echo "Lock file has not changed"
  fi
fi
