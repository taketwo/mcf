#!/bin/bash
## Usage: mpdrate [0-5]
#
# Adds current playing song to the mpd playlist corresponding to the
# rating assigned. Any previous rating is removed. If 0 is given, the
# songs rating will be removed.
#
# From: https://bbs.archlinux.org/viewtopic.php?id=116113

## USER CONFIGURATION-----------------------------------------------------

## Path to playlists
playlists="$HOME/.config/mpd/playlists"
host=${MPD_HOST:-localhost}

## END USER CONFIGURATION--------------------------------------------------

## Prefix and suffix strings for the playlist file name
pl_prefix='rating-'
pl_suffix='.m3u'

## Get current song from ncmpcpp or cmus or throw an error
song=`mpc -h $host -f %file% current 2>/dev/null` || \
    { echo "Error: you need mpc installed to run this script. Aborting." >&2; exit 1; }

function get_song_rating()
{
  local filename=$1
  local n
  for n in {1..5}; do
    local playlist="$playlists/${pl_prefix}$n${pl_suffix}"
    if [[ -f "$playlist" ]]; then
      grep -qF "$filename" "$playlist"
      if [[ $? -eq 0 ]]; then
        echo "$n"
        return
      fi
    fi
  done
}

function rating_as_stars()
{
  if [[ "$1" -lt 1 || "$1" -gt 5 ]]; then
    echo "          "
  else
    declare -a stars=('          ' '★         ' '★ ★       ' '★ ★ ★     ' '★ ★ ★ ★   ' '★ ★ ★ ★ ★ ');
    echo ${stars[$1]}
  fi
  #echo "--$1--"
}

## Error cases
if [[ $# -eq 0 ]]; then
  bold=$(tput bold)
  normal=$(tput sgr0)
  OIFS=$IFS
  IFS='@'
  while read -a line; do
    track=${line[0]}
    filename=${line[1]}
    rating=`get_song_rating "$filename"`
    stars=`rating_as_stars $rating`
    if [[ "$song" == "$filename" ]]; then
      track="${bold}${track}${normal}"
    fi
    echo "$stars $track"
  done < <(mpc -h "$host" playlist -f "%artist% - %title%@%file%")
  IFS=$OIFS
  exit 1
elif [[ -z "$song" ]]; then
  echo 'No song is playing.'
  exit 1
elif [[ "$1" == "?" ]]; then
  rating=`get_song_rating "$song"`
  echo "Rating of the current song: $rating"
  exit 1
elif [[ "$1" -lt 0 || "$1" -gt 5 ]]; then
  echo "Rating must be between 1 and 5. Or zero to delete the current song's rating."
  exit 1
fi

## Path to lock file
lock="/tmp/mpdrate.lock"

## Lock the file
exec 9>"$lock"
if ! flock -n 9; then
  notify-send "Rating failed: Another instance is running."
  exit 1
fi

## Strip "file " from the output
song=${song/file \///}

## Temporary file for grepping and sorting
tmp="$playlists/tmp.m3u"

## Remove the song from all rating playlists
for n in {1..5}; do
  f="$playlists/${pl_prefix}$n${pl_suffix}"
  if [[ -f "$f" ]]; then
    grep -vF "$song" "$f" > "$tmp"
    mv -f $tmp $f
  fi
done

## Append the song to the new rating playlist
if [[ $1 -ne 0 ]]; then
  f="$playlists/${pl_prefix}$1${pl_suffix}"
  mkdir -p "$playlists"
  echo "$song" >> "$f"
  sort -u "$f" -o "$tmp"
  mv -f $tmp $f
fi

## The lock file will be unlocked when the script ends
