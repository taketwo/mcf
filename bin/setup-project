#!/usr/bin/env python
# encoding: utf-8

import os
import urwid
import subprocess

import mcf
from filesystem import link


_widget_cache = {}


def add_widget(setting, widget):
    _widget_cache[setting] = widget


def f_link_ycm_config():
    link(mcf.path('misc', '.ycm_extra_conf.py'),
         '.ycm_extra_conf.py',
         'Standard YCM config file')

s_link_ycm_config = {'text': 'Link to standard YCM config file',
                     'action': f_link_ycm_config}

def f_set_makeprg():
    with open('.vim', 'a') as f:
        f.write('let &makeprg="make\ -C".expand(\'<sfile>:p:h\')."/build"\n')

s_set_makeprg = {'text': 'Set &makeprg',
                 'action': f_set_makeprg}

def f_use_pylint():
    with open('.vim', 'a') as f:
        f.write('let g:syntastic_python_pylint_args = \'--rcfile=.pylintrc\'\n')
    subprocess.call(['pylint', '--generate-rcfile'], stdout=open('.pylintrc', 'w'))

s_use_pylint = {'text': 'Use pylint',
                'action': f_use_pylint}

snip='''augroup AddSnippets
  autocmd!
  autocmd FileType cpp :UltiSnipsAddFiletypes pcl.eigen.cpp
augroup END
'''

def f_associate_snippets():
    with open('.vim', 'a') as f:
        f.write(snip)

s_associate_snippets = {'text': 'Associate cpp with pcl and eigen snippets',
                        'action': f_associate_snippets}

s_create_vim_project = {'text': 'Create Vim project file',
                        'children': [s_set_makeprg,
                                     s_associate_snippets,
                                     s_use_pylint]}

s_settings = {'text': 'Project settings',
              'children': [s_create_vim_project, s_link_ycm_config]}


class CheckBoxNodeWidget(urwid.TreeWidget):

    def __init__(self, node):
        self.__super.__init__(node)
        self._w = urwid.AttrWrap(self._w, None)
        self.checked = False
        self.update_widget()
        add_widget(node, self)

    def selectable(self):
        return True

    def get_display_text(self):
        node = self.get_node().get_value()
        return node['text']

    def keypress(self, size, key):
        key = self.__super.keypress(size, key)
        if key:
            key = self.unhandled_keys(size, key)
        return key

    def unhandled_keys(self, size, key):
        if key == ' ':
            self.checked = not self.checked
            self.update_widget()
        else:
            return key

    def update_widget(self):
        if self.checked:
            self._w.attr = 'checked'
            self._w.focus_attr = 'checked focus'
        else:
            self._w.attr = 'body'
            self._w.focus_attr = 'focus'

class ParentNode(urwid.ParentNode):

    def load_widget(self):
        return CheckBoxNodeWidget(self)

    # def load_child_keys(self):
        # return [c['text'] for c in self.get_value()['children']]

    def load_child_keys(self):
        data = self.get_value()
        return range(len(data['children']))

    def load_child_node(self, key):
        # index = self.get_child_index(key)
        child = self.get_value()['children'][key]
        depth = self.get_depth() + 1
        if 'children' in child:
            klass = ParentNode
        else:
            klass = LeafNode
        return klass(child, parent=self, key=key, depth=depth)


class LeafNode(urwid.TreeNode):

    def load_widget(self):
        return CheckBoxNodeWidget(self)


def build_config_tree():
    pass


class ExampleTreeWidget(urwid.TreeWidget):
    """ Display widget for leaf nodes """
    def get_display_text(self):
        return urwid.CheckBox(self.get_node().get_value()['name'])
        # return self.get_node().get_value()['name']


class ExampleNode(urwid.TreeNode):
    """ Data storage object for leaf nodes """
    def load_widget(self):
        return ExampleTreeWidget(self)


class ExampleParentNode(urwid.ParentNode):
    """ Data storage object for interior/parent nodes """
    def load_widget(self):
        return ExampleTreeWidget(self)

    def load_child_keys(self):
        data = self.get_value()
        return range(len(data['children']))

    def load_child_node(self, key):
        """Return either an ExampleNode or ExampleParentNode"""
        childdata = self.get_value()['children'][key]
        childdepth = self.get_depth() + 1
        if 'children' in childdata:
            childclass = ExampleParentNode
        else:
            childclass = ExampleNode
        return childclass(childdata, parent=self, key=key, depth=childdepth)


class ConfigTreeBrowser(object):

    PALETTE = [('body', 'black', 'yellow'),
               ('footer', 'light gray', 'white'),
               ('focus', 'light gray', 'dark blue', 'standout'),
               ('checked', 'black', 'dark green', ('bold', 'underline')),
               ('checked focus', 'yellow', 'dark cyan', ('bold', 'standout', 'underline'))]

    def __init__(self, config_tree):
        self.listbox = urwid.TreeListBox(urwid.TreeWalker(ParentNode(s_settings)))
        self.footer = urwid.AttrWrap(urwid.Text('FOOTER'), 'footer')
        self.view = urwid.Frame(urwid.AttrWrap(self.listbox, 'body'),
                                footer=self.footer)

    def main(self):
        self.loop = urwid.MainLoop(self.view,
                                   self.PALETTE,
                                   unhandled_input=self.unhandled_input)
        self.loop.run()

    def unhandled_input(self, k):
        if k in ('q', 'Q'):
            raise urwid.ExitMainLoop()


choices = u'Chapman Cleese Gilliam Idle Jones Palin'.split()

def menu(title, choices):
    body = [urwid.Text(title), urwid.Divider()]
    for c in choices:
        button = urwid.CheckBox(c)
        # urwid.connect_signal(button, 'change', item_chosen, c)
        body.append(urwid.AttrMap(button, None, focus_map='reversed'))
    return urwid.ListBox(urwid.SimpleFocusListWalker(body))

# def item_chosen(button, choice):
    # response = urwid.Text([u'You chose ', choice, u'\n'])
    # done = urwid.Button(u'Ok')
    # urwid.connect_signal(done, 'click', exit_program)
    # main.original_widget = urwid.Filler(urwid.Pile([response,
        # urwid.AttrMap(done, None, focus_map='reversed')]))

def exit_program(button):
    raise urwid.ExitMainLoop()

# main = urwid.Padding(menu(u'Pythons', choices), left=2, right=2)
# top = urwid.Overlay(main, urwid.SolidFill(u'\N{MEDIUM SHADE}'),
    # align='center', width=('relative', 60),
    # valign='middle', height=('relative', 60),
    # min_width=20, min_height=9)
# urwid.MainLoop(top, palette=[('reversed', 'standout', '')]).run()

if __name__=="__main__":
    # sample = get_example_tree()
    # ExampleTreeBrowser(sample).main()
    config_tree = {'name': 'hello'}
    ConfigTreeBrowser(config_tree).main()
    for s, w in _widget_cache.items():
        if w.checked and 'action' in s.get_value():
            s.get_value()['action']()
