#!/bin/bash

function show_help() {
  cat <<EOF
  Usage: ${0##*/} [-h] layout

  This script configures the screen layout according to predefined rules.
  Supported layouts: laptop, office, alpaca.

  If layout is not given, then count the number of connected/active displays
  and try to choose automatically.

  Options:

    -h        Display this help and exit.
EOF
}

function set_layout() {
  case $1 in
    laptop) xrandr --output "$EDP1" --primary --mode "$EDP1_MODE" --pos 0x0 --rotate normal --output "$DP1" --off ;;
    office-0) xrandr --output "$EDP1" --off --output "$DP1" --off ;;
    office) xrandr --output "$EDP1" --off --output "$DP1" --primary --mode "$DP1_MODE" --pose 0x0 --rotate normal ;;
    alpaca-0) xrandr --output HDMI-0 --off --output DP-4 --primary --mode 2560x1440 --pos 0x0 --rotate normal ;;
    alpaca) xrandr --output HDMI-0 --mode 2560x1440 --pos 4000x0 --rotate normal --output DP-4 --primary --mode 2560x1440 --pos 1440x0 --rotate normal --output DP-2 --mode 2560x1440 --pos 0x0 --rotate left ;;
  esac
  sleep 7
}

while [ $# -gt 0 ]; do
  case "$1" in
    -h)
      show_help
      exit 0
      ;;
    *)
      layout=$1
      ;;
  esac
  shift
done

EDP1="eDP"
EDP1_MODE="1920x1080"
DP1="DP-1-2"
DP1_MODE="2560x1440"

if [[ $layout == "" ]]; then
  connected=$(xrandr --query | grep -c " connected ")
  active=$(xrandr --query | grep -c "*")
  echo -n "Number of connected/active displays: $connected/$active, "
  if [[ $connected == 1 ]]; then
    layout='laptop'
  elif [[ $connected == 2 ]]; then
    layout='office'
  elif [[ $connected == 3 ]]; then
    layout='alpaca'
  else
    echo "unable to auto select layout"
    exit 1
  fi
  echo "auto selecting layout: $layout"
fi

if [[ $layout == "laptop" ]]; then
  set_layout "laptop"
elif [[ $layout == "office" ]]; then
  set_layout "office-0"
  set_layout "office"
elif [[ $layout == "alpaca" ]]; then
  set_layout "alpaca-0"
  set_layout "alpaca"
else
  echo "Unknown layout '$layout'"
  exit 1
fi

xmonad --restart
